#!/bin/bash -e

function connect() {
	declare -r net_name="$1"
	declare -r cni_iface_name="$2"

	declare -r host_veth_name="m3${net_name:0:1}h${CNI_CONTAINERID:0:10}"
	declare -r container_veth_name="m3${net_name:0:1}c${CNI_CONTAINERID:0:10}"

	declare -r short_net_name="${net_name:0:3}"
	declare -r vlan_varname="${short_net_name^^}_VLAN"
	declare -r cidr_varname="${short_net_name}_iface_cidr"
	declare -r gw_varname="${short_net_name}_iface_gw"

	# Set netns link for iproute
	mkdir -p /var/run/netns
	ln -sfT "$CNI_NETNS" "/run/netns/${CNI_CONTAINERID}"

	# Create veth and network it
	ip link add "$host_veth_name" type veth peer name "$container_veth_name"
	ip link set "$container_veth_name" netns "$CNI_CONTAINERID"
	port_addition_args=("$bridge" "$host_veth_name")
	if [[ -n "${!vlan_varname}" ]]; then
		port_addition_args+=("tag=${!vlan_varname}")
	fi
	ovs-vsctl add-port "${port_addition_args[@]}"
	ip netns exec "$CNI_CONTAINERID" ip link show
	ip netns exec "$CNI_CONTAINERID" ip link set "$container_veth_name" name "$cni_iface_name"
	ip netns exec "$CNI_CONTAINERID" ip link show
	ip netns exec "$CNI_CONTAINERID" ip addr add "${!cidr_varname}" dev "$cni_iface_name"
	ip netns exec "$CNI_CONTAINERID" ip link show

	ip link set "$host_veth_name" up
	ip netns exec "$CNI_CONTAINERID" ip link set "$cni_iface_name" up

	# Setting mac variable for result
	declare -g "${short_net_name}_iface_mac=$(ip netns exec "$CNI_CONTAINERID" ip link show "$cni_iface_name" | awk '/ether/ {print $2}')"

	# Setting a default route if necessary
	if ! ip netns exec "$CNI_CONTAINERID" ip route show | grep default && [[ "${!gw_varname}" != "null" && "${!gw_varname}" != "" ]]; then
		ip netns exec "$CNI_CONTAINERID" ip route add default via "${!gw_varname}" dev "$cni_iface_name"
	fi
	ip netns exec "$CNI_CONTAINERID" ip link show
}


# Let's put stdout as a log file
exec 3>&1
exec &>> /var/log/metal3-cni.log

if [[ $DEBUG -ne 0 ]]; then
	set -x;
fi

readonly network_configuration=$(</dev/stdin)
case "$CNI_COMMAND" in
ADD)
	readonly cni_version=$(jq -r ".cniVersion" <<< "$network_configuration")
	readonly name=$(jq -r ".name" <<< "$network_configuration")
	readonly bridge=$(jq -r ".bridge" <<< "$network_configuration")
	echo "$bridge"
	readonly args=$(jq -r ".args" <<< "$network_configuration")

	if [[ -n "$PROV_CIDR" ]] && [[ -n "$EXT_CIDR" ]]; then
		readonly pro_iface_cidr="$PROV_CIDR"
		readonly ext_iface_cidr="$EXT_CIDR"
		if [[ -n "$PROV_GW" ]]; then
			readonly pro_iface_gw="$PROV_GW"
		else
			readonly ext_iface_gw="$EXT_GW"
		fi
	else
		IFS=":" read -r -a findpaths <<< "$CNI_PATH"
		readonly host_local_bin="$(find "${findpaths[@]}" -maxdepth 1 -type f -name host-local -executable | head -1)"
		readonly ipam_result=$(echo "$network_configuration" | "$host_local_bin")
		readonly ipam_code=$(jq -r '.code' <<< "$ipam_result")
		if [[ "$ipam_code" != "null" ]]; then
			>&3 echo "$ipam_result"
			exit 1
		fi

		readonly pro_iface_cidr=$(jq -r '.ips[0].address' <<< "$ipam_result")
		if [[ $pro_iface_cidr =~ ^[0-9]+(\.[0-9]*){3}/[0-9]+$  ]]; then
			readonly pro_ip_family=4
		else
			readonly pro_ip_family=6
		fi
		readonly pro_iface_gw=$(jq -r '.ips[0].gateway' <<< "$ipam_result")

		readonly ext_iface_cidr=$(jq -r '.ips[1].address' <<< "$ipam_result")
		if [[ $ext_iface_cidr =~ ^[0-9]+(\.[0-9]*){3}/[0-9]+$ ]]; then
			readonly ext_ip_family=4
		else
			readonly ext_ip_family=6
		fi
		readonly ext_iface_gw=$(jq -r '.ips[1].gateway' <<< "$ipam_result")
	fi

	if [[ -n "$CNI_EXTRA_ARGS" ]]; then
		eval "$CNI_EXTRA_ARGS"
	fi

	# Set netns link for iproute
	mkdir -p /var/run/netns
	ln -sfT "$CNI_NETNS" "/run/netns/${CNI_CONTAINERID}"

	# Provisioning network
	readonly pro_ifname="$CNI_IFNAME"
	connect provisioning "$CNI_IFNAME"

	# External network
	[[ $CNI_IFNAME =~ (.*[^0-9])([0-9]+)$ ]] && \
		readonly ext_ifname="${BASH_REMATCH[1]}$((BASH_REMATCH[2] + 1))"
	connect external "$ext_ifname"

	# Gather macs for results
	tee >(cat >&3) << EOF  # Making sure that it gets printed both to the log and to the 3rd file descriptor
{
  "cniVersion": "0.4.0",
  "interfaces": [
    {
      "name": "$pro_ifname",
      "mac": "$pro_iface_mac",
      "sandbox": "$CNI_NETNS"
    },
    {
      "name": "$ext_ifname",
      "mac": "$ext_iface_mac",
      "sandbox": "$CNI_NETNS"
    }
  ],
  "ips": [
    {
      "version": "$pro_ip_family",
      "address": "$pro_iface_cidr",
      "gateway": "$pro_iface_gw",
      "interface": 0
    },
    {
      "version": "$ext_ip_family",
      "address": "$ext_iface_cidr",
      "gateway": "$ext_iface_gw",
      "interface": 1
    }
  ]
}
EOF

;;

DEL)
	readonly bridge=$(jq -r ".bridge" <<< "$network_configuration")
	readonly tmp_port_name="$(head -c 10 <<< "$CNI_CONTAINERID")"
	ovs-vsctl del-port "$bridge" "m3ph${tmp_port_name}"
	ovs-vsctl del-port "$bridge" "m3eh${tmp_port_name}"
	rm "/run/netns/${CNI_CONTAINERID}"

	# Deallocate
	IFS=":" read -r -a findpaths <<< "$CNI_PATH"
	readonly host_local_bin="$(find "${findpaths[@]}" -maxdepth 1 -type f -name host-local -executable | head -1)"
	readonly ipam_result=$(echo "$network_configuration" | "$host_local_bin")
;;

GET)
	echo "NOT SUPPORTED"
	exit 1
;;

CHECK)
	# TODO: Use prevResult to check if the networking is as expected
;;

VERSION)
	tee >(cat >&3) << EOF
{
  "cniVersion": "0.4.0",
  "supportedVersions": ["0.3.0", "0.3.1", "0.4.0" ]
}
EOF

;;
esac
